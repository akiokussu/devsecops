pipeline {
    agent any
    environment {
        // Environment variables for Docker image and AWS configuration
        DOCKER_IMAGE = 'webapp-aws-devsecops'
        ECR_REGISTRY = '986505030570.dkr.ecr.eu-central-1.amazonaws.com'
        REPO_NAME = 'miranda_devsecops'
        PROJECT_DIR = 'webapp-aws-devsecops'
        AWS_DEFAULT_REGION = 'eu-central-1'
        SLACK_CHANNEL = '#slack_channel'
        
        // fetch credentials for the web applications servser
        WEB_APP_SERVER_IP = credentials('web-app-server-ip') 
        WEB_APP_USER = credentials('web-app-user') 
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        docker.build("${ECR_REGISTRY}/${REPO_NAME}:latest")
                    }
                }
            }
        }
        stage('Trivy Vulnerability Scan') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        try {
                            //Scan & Store the output to JSON 
                            // Added exit code https://aquasecurity.github.io/trivy/v0.17.2/examples/others/#:~:text=Others-,Exit%20Code,even%20when%20vulnerabilities%20are%20detected.
                            // Add --severity HIGH,CRITICAL ??? 
                            def trivyOutputJson = sh(script: "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.49.1 --exit-code 1 -f json -o output.json ${ECR_REGISTRY}/${REPO_NAME}:latest && cat output.json", returnStdout: true).trim()
                            //Parse the JSON
                            def parsedJson = readJSON text: trivyOutputJson
                            //print needed info 
                            parsedJson.each { vuln ->
                                echo "Vulnerability ID: ${vuln.VulnerabilityID}, Severity: ${vuln.Severity}, Package: ${vuln.PkgName}"
                            }
                        } catch (Exception e) {
                            notifySlack(channel: "${SLACK_CHANNEL}", message: "Vulnerabilities found in ${REPO_NAME}:latest. Review and remediation required")
                            error "Stopping build due to vulnerabilities found by Trivy."
                        }
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        // No need for username:password becouse I have attached the proper IAM role+policy
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        docker.image("${ECR_REGISTRY}/${REPO_NAME}:latest").push()
                    }
                }
            }
        }
        stage('Deploy to Web Application Server') {
            steps {
                script {
                    // Inject secured credentials and environment variables
                    withCredentials([
                        sshUserPrivateKey(credentialsId: '<SSH_KEY_ID_HERE>', keyFileVariable: 'DEPLOY_SSH_KEY'),
                        string(credentialsId: 'web-app-server-ip-id', variable: 'WEB_APP_SERVER_IP'),
                        string(credentialsId: 'web-app-user-id', variable: 'WEB_APP_USER')
                    ]) {
                        // Secure deployment using sshagent
                        sshagent(credentials: ['jenkins-deploy-key']) {
                            sh "scp ${env.PROJECT_DIR}/docker-compose.yml ${WEB_APP_USER}@${WEB_APP_SERVER_IP}:/home/ubuntu"
                            sh "ssh ${WEB_APP_USER}@${WEB_APP_SERVER_IP} 'cd /home/ubuntu && docker-compose up -d'"
                        }
                    }
                }
            }
        }

    }
    post {
        always {
            // Clean up steps, such as notifying team members on Slack
        }
    }
}

def notifySlack(channel, message) {
    slackSend(channel: channel, message: message)
}
