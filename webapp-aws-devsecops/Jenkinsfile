pipeline {
    agent any
    environment {
        // Environment variables for Docker image and AWS configuration
        DOCKER_IMAGE = 'webapp-aws-devsecops'
        ECR_REGISTRY = '986505030570.dkr.ecr.eu-central-1.amazonaws.com'
        REPO_NAME = 'miranda_devsecops'
        PROJECT_DIR = 'webapp-aws-devsecops'
        AWS_DEFAULT_REGION = 'eu-central-1'
        SLACK_CHANNEL = '#slack_channel'
        
        // fetch credentials
        WEB_APP_SERVER_IP = credentials('web-app-server-ip') 
        WEB_APP_USER = credentials('web-app-user') 
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        docker.build("${ECR_REGISTRY}/${REPO_NAME}:latest")
                    }
                }
            }
        }
        stage('Trivy Vulnerability Scan') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        try {
                            // Be
                            sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.49.1 ${ECR_REGISTRY}/${REPO_NAME}:latest"
                        } catch (Exception e) {
                            notifySlack(channel: "${SLACK_CHANNEL}", message: "Trivy vulnerability scan failed for ${REPO_NAME}:latest. Please check Jenkins for details.")
                            throw e
                        }
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    script {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        docker.image("${ECR_REGISTRY}/${REPO_NAME}:latest").push()
                    }
                }
            }
        }
        stage('Deploy to Web Application Server') {
            steps {
                script {
                    sshagent(['ssh-deploy-key']) { // ID of the SSH private key credential from Jenkins
                        sh "scp ${env.PROJECT_DIR}/docker-compose.yml ${WEB_APP_USER}@${WEB_APP_SERVER_IP}:/home/ubuntu"
                        sh "ssh ${WEB_APP_USER}@${WEB_APP_SERVER_IP} 'cd /home/ubuntu && docker-compose up -d'"
                    }
                }
            }
        }

    }
    post {
        always {
            // Clean up steps, such as notifying team members on Slack, could go here.
        }
    }
}

def notifySlack(channel, message) {
    slackSend(channel: channel, message: message)
}
